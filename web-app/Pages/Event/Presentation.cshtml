@using BAL.Models.Event
@model EventStartViewModel

@{
    Layout = "~/Pages/Shared/_EventLayout.cshtml";
}


<div class="reveal">
    <div class="slides">
        <section class="event-page container-fluid">
            <div class="row justify-content-center align-items-center">
                <div class="col-4 qr-code">
                    @await Html.PartialAsync("~/Pages/Shared/_QRCodePartial.cshtml", Model.QRCodeViewModel)
                </div>
                <div class="col-8 event-info">
                    <h1 class="display-1 text-light font-weight-bold">
                        @Model.Presentation.Name
                    </h1>
                </div>
                <div class="users-container">
                    <div class="avatar">
                        <img src="@Model.Image" />
                        <p>@Model.Username</p>
                    </div>
                    <div class="avatar">
                        <img src="@Model.Image" />
                        <p>@Model.Username</p>
                    </div>
                    <div class="avatar">
                        <img src="@Model.Image" />
                        <p>@Model.Username</p>
                    </div>
                    <div class="avatar">
                        <img src="@Model.Image" />
                        <p>@Model.Username</p>
                    </div>
                     <div class="avatar">
                        <img src="@Model.Image" />
                        <p>@Model.Username</p>
                    </div>
                    <div class="avatar">
                        <img src="@Model.Image" />
                        <p>@Model.Username</p>
                    </div>
                    <div class="avatar">
                        <img src="@Model.Image" />
                        <p>@Model.Username</p>
                    </div>
                </div>
            </div>
        </section>
        @foreach (var slide in Model.Presentation.Slides)
        {
            <section>
                @if (slide.Type == "Title")
                {
                    <h1>
                        @slide.Title
                    </h1>
                    <p>
                        @slide.Text
                    </p>
                }

                @if (slide.Type == "Image")
                {
                    <img src="@slide.Image" alt="Slide Image" />
                    <p>
                        @slide.Text
                    </p>
                }

                @if (slide.Type == "Rating")
                {
                    for (int i = 0; i < slide.Rating; i++)
                    {
                        <svg width="32"
                 xmlns="http://www.w3.org/2000/svg"
                 viewBox="0 0 576 512">
                            <path d="M316.9 18C311.6 7 300.4 0 288.1 0s-23.4 7-28.8 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3l128.3-68.5 128.3 68.5c10.8 5.7 23.9 4.9 33.8-2.3s14.9-19.3 12.9-31.3L438.5 329 542.7 225.9c8.6-8.5 11.7-21.2 7.9-32.7s-13.7-19.9-25.7-21.7L381.2 150.3 316.9 18z" />
                        </svg>
                    }
                }
            </section>
        }
    </div>
</div>

<script src="~/revealjs/dist/reveal.js"></script>
<script src="~/revealjs/plugin/notes/notes.js"></script>
<script src="~/revealjs/plugin/markdown/markdown.js"></script>
<script src="~/revealjs/plugin/highlight/highlight.js"></script>

<script>
    isPresenter = (@Model.IsPresenter.ToString().ToLower());
    var presentationId = @Model.Presentation.Id;

    Reveal.initialize({
        hash: true,
        plugins: [RevealMarkdown, RevealHighlight, RevealNotes],
        controls: isPresenter,
        keyboard: isPresenter,
        touch: isPresenter,
    });
</script>

