@using BAL.Models.Event
@model EventStartViewModel
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor contextAccessor

@{
    Layout = "~/Pages/Shared/_EventLayout.cshtml";
    var isPresenterQuery = contextAccessor.HttpContext.Request.QueryString.ToString();
}

<div class="reveal" style="background-image:url('@string.Join("\\\\", Model.Presentation.Image.Split("\\"))')">
    <div class="slides">
        <section class="event-page container-fluid">
            <div class="row justify-content-center align-items-center">
                <div class="col-4 qr-code">
                    @await Html.PartialAsync("~/Pages/Shared/_QRCodePartial.cshtml", Model.QRCodeViewModel)
                </div>
                <div class="col-8 event-info">
                    <h1 class="display-1 text-light font-weight-bold">
                        @Model.Presentation.Name
                    </h1>
                </div>
                <div id="users-container" class="users-container">
                </div>
            </div>

        </section>

        @foreach (var slide in Model.Presentation.Slides)
        {
            <section>
                @if (slide.Type == "Title")
                {
                    <h1>
                        @slide.Title
                    </h1>
                    <p>
                        @slide.Text
                    </p>
                }

                @if (slide.Type == "Image")
                {
                    <img src="@slide.Image" alt="Slide Image" />
                    <p>
                        @slide.Text
                    </p>
                }

                @if (slide.Type == "Rating")
                {
                    for (int i = 0; i < slide.Rating; i++)
                    {
                        <svg width="32"
                 xmlns="http://www.w3.org/2000/svg"
                 viewBox="0 0 576 512">
                            <path d="M316.9 18C311.6 7 300.4 0 288.1 0s-23.4 7-28.8 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3l128.3-68.5 128.3 68.5c10.8 5.7 23.9 4.9 33.8-2.3s14.9-19.3 12.9-31.3L438.5 329 542.7 225.9c8.6-8.5 11.7-21.2 7.9-32.7s-13.7-19.9-25.7-21.7L381.2 150.3 316.9 18z" />
                        </svg>
                    }
                }
                @if (slide.Type == "WordCloud")
                {
                    if (!isPresenterQuery.Contains("isPresenter"))
                    {
                        isPresenterQuery = "isPresenter";
                        <h1>
                            @slide.Title
                        </h1>
                        var slideIndex = Model.Presentation.Slides.ToList().FindIndex(s => s == slide);
                        var id = Model.Presentation.Id.ToString() + " " + slide.Id.ToString() + " " + slideIndex.ToString();
                        <p>
          
                            <form asp-route-id="@id" asp-action="WordCloudSubmit" asp-controller="Event" method="get">
                                <input class="form-control" type="text" name="message" maxlength="200" />
                                <button type="submit" class="btn btn-primary" style="width:150px">Ok</button>
                            </form>
                        </p>

                    }
                    else
                    {
                        if (slide.WordCloudAnswers.Count() != 0)
                        {
                            foreach (var answer in slide.WordCloudAnswers)
                            {
                                <h1>
                                    @answer
                                </h1>
                            }
                        }
                        else
                        {
                            <h1>
                                Waiting for answers
                            </h1>
                        }
                    }
                }
            </section>
        }
    </div>


</div>

<div class="reactions-container">
    <div id="reactions-list" class="reactions-list">
        <img id="like" src="~/images/reactions/like.png" alt="">
        <img id="wave" src="~/images/reactions/wave.png" alt="">
        <img id="love" src="~/images/reactions/love.png" alt="">
        <img id="clap" src="~/images/reactions/clap.png" alt="">
        <img id="laughter" src="~/images/reactions/laughter.png" alt="">
    </div>
    <img id="reactions-btn" class="reactions-btn" src="~/images/reactions/reaction.png" alt="">
</div>

<div id="reactions" class="reactions">
</div>

<script src="~/revealjs/dist/reveal.js"></script>
<script src="~/revealjs/plugin/notes/notes.js"></script>
<script src="~/revealjs/plugin/markdown/markdown.js"></script>
<script src="~/revealjs/plugin/highlight/highlight.js"></script>

<script>
    isPresenter = (@Model.IsPresenter.ToString().ToLower());
    var presentationId = @Model.Presentation.Id;
    var username = "@Model.Username";
    var image = `@string.Join("\\\\", Model.Image.Split("\\"))`;

    Reveal.initialize({
        hash: true,
        plugins: [RevealMarkdown, RevealHighlight, RevealNotes],
        controls: isPresenter,
        keyboard: isPresenter,
        touch: isPresenter,
    });
</script>

